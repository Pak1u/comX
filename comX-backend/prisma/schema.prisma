// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  username    String       @unique
  name        String
  password    String
  avatar      String?      
  designation String
  otp         String?   
  isOtpValid  DateTime? 
  isVerified  Boolean?     @default(false)
  registeredAt   DateTime     @default(now())

  // Relationships
  memberships CommunityMember[]
  calendarTasks CommunityCalendar[]
}

model Community {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  coverImage  String?
  scope       Scope             @default(PUBLIC)
  joinCode    String?           @unique
  createdAt   DateTime          @default(now())

  // Relationships
  members     CommunityMember[]
  calendarTasks CommunityCalendar[]
}

model CommunityMember {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  community    Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId  Int
  role         Role       @default(MEMBER) 

  joinedAt     DateTime   @default(now())

  @@unique([userId, communityId])
}

model CommunityCalendar {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  community    Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId  Int
  title        String
  description  String
  startTime    DateTime
  endTime      DateTime

  @@unique([userId, communityId])
}

enum Role {
  OWNER  // The user who created the community
  ADMIN  // Admins with elevated permissions
  MEMBER // Regular members
  QUEUE
  BANNED
}

enum Scope {
  PRIVATE
  PUBLIC
}



